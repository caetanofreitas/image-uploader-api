// Code generated by MockGen. DO NOT EDIT.
// Source: entity/repository.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"
	entity "uploader/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockImageRepository) Get() ([]entity.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]entity.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageRepository)(nil).Get))
}

// GetDetail mocks base method.
func (m *MockImageRepository) GetDetail(id string) (entity.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", id)
	ret0, _ := ret[0].(entity.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockImageRepositoryMockRecorder) GetDetail(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockImageRepository)(nil).GetDetail), id)
}

// Insert mocks base method.
func (m *MockImageRepository) Insert(id, name string, size float64, extension, status, error_message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", id, name, size, extension, status, error_message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockImageRepositoryMockRecorder) Insert(id, name, size, extension, status, error_message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockImageRepository)(nil).Insert), id, name, size, extension, status, error_message)
}

// Update mocks base method.
func (m *MockImageRepository) Update(id, name string, size float64, extension, status, error_message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, size, extension, status, error_message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageRepositoryMockRecorder) Update(id, name, size, extension, status, error_message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageRepository)(nil).Update), id, name, size, extension, status, error_message)
}

// MockImageUploader is a mock of ImageUploader interface.
type MockImageUploader struct {
	ctrl     *gomock.Controller
	recorder *MockImageUploaderMockRecorder
}

// MockImageUploaderMockRecorder is the mock recorder for MockImageUploader.
type MockImageUploaderMockRecorder struct {
	mock *MockImageUploader
}

// NewMockImageUploader creates a new mock instance.
func NewMockImageUploader(ctrl *gomock.Controller) *MockImageUploader {
	mock := &MockImageUploader{ctrl: ctrl}
	mock.recorder = &MockImageUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUploader) EXPECT() *MockImageUploaderMockRecorder {
	return m.recorder
}

// UploadImage mocks base method.
func (m *MockImageUploader) UploadImage(image []byte, id, extension string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", image, id, extension)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockImageUploaderMockRecorder) UploadImage(image, id, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockImageUploader)(nil).UploadImage), image, id, extension)
}
